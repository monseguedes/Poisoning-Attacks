1. Ignore some files from the git repository

We do not want to track files generated by Python. For example,
Python creates `*.pyc` file as a cache. This is automatically generated
by Python so we do not want to track its history. To find all cache files,
we can type

```
$ find . -name "*.pyc"
$ find . -name "__pycache__"
```

Then we can remove files from git repository by

```
$ git rm -r programs/minlp/model/__pycache__
```


2. Create virtual environment

Run the following script and setup a virtual environment

```
$ ./setup_python_env.sh
```


3. Add black formatter

Add black in the virtual environment. To run black, type the following in the
top directory of the project

```
$ black programs/
```


4. deprecated warning and property

When we renaming a name of a variable on a class, we can use the following

```
(original)

class Foo:
    def __init__(self):
        self.old_var = 10

(new)

class Foo:
    def __init__(self):
        self.new_var = 10

    @property
    def old_var(self):
        import warnings

        warnings.warn("old_var is deprecated. use new_var", stacklevel=2)
        return self.new_var
```

When we access `old_var` variable, `old_var(self)` is called. This emits
a warning and then return the value.

See `no_samples` and `no_psamples` for actual use.


5. doctest

In `programs/minlp/model/pyomo_instance_class.py` functions has
documentation which examples. We can actually run the examples
and test if the outputs of the functions are as expected or not:

```
$ python -m doctest programs/minlp/model/pyomo_instance_class.py
```
